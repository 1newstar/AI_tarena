6、MySQL调优
  1、选择合适的存储引擎
    1、经常用来读的表使用myisam存储引擎
    2、其余的表都用innodb存储引擎
  2、SQL语句调优(尽量避免全表扫描)
    1、在select where order by常涉及到的字段上建立索引
    2、where子句中不使用 !=,否则将放弃使用索引进行全表扫描
    3、尽量避免用NULL值判断,否则会全表扫描
      示例：
        select id from t1 where number is null;
      优化：
        在number字段设置默认值0
    4、尽量避免 or 来连接条件,导致全表扫描
      示例(优化前)：
        select id from t1 where id=10 or id=20;
      优化后：
        select id from t1 where id=10
        union all
        select id from t1 where id=20;
    5、模糊查询尽量避免使用前置 %,导致全表扫描
      select id from t1 where name like "a%";
    6、尽量避免 in 和 not in,导致全表扫描
      select id from t1 where id in(1,2,3);
      select id from t1 where id between 1 and 3;
    7、尽量避免使用 select * ...,要用具体的字段列表代替 *,不要返回用不到的任何字段

1、第一阶段
1.  Python是如何进行内存管理的？
  答：从三个方面来说，1）引用计数机制 2）垃圾回收机制 3）内存池机制
  1)  对象的引用计数机制
  Python内部使用引用计数，来追踪内存中的对象，所有对象都有引用计数。
  引用计数增加的情况：
  1.  一个对象分配一个新名称
  2.  将其放入一个容器中（如列表、字典、元组）
  ３．新建一个对象
  ４．将其作为参数传入函数
  引用计数减少的情况：
  1.  使用del语句销毁对象别名
  ２．对象别名与其他对象进行绑定
  ３.  引用超出作用域或被重新赋值
  ４．删除容器或删除容器中的元素
  sys.getrefcount()可以获取对象的当前引用计数
  多数情况下，引用计数比你猜测的要大得多。对于不可变数据（如数字和字符串），解释器会在程序的不同部分共享内存，以便节约内存
  2)  垃圾回收
  1）  当一个对象的引用计数归零时，它将被垃圾收集机制处理掉。
  2）  当两个对象a 和b相互引用时，del语句可以减少a 和b的引用计数，并销毁用于引用底层对象的名称。
  然而由于每个对象都包含一个对其他对象的引用，因此引用计数永远不会归零，对象不会销毁。（从而导致内存泄漏）。为解决这一问题，解释器会定期执行一个循环检测器，检测那些不可访问对象的循环并删除他们
  3)  内存池机制
  Python提供了对内存的垃圾收集机制，但是它将不用的垃圾放到内存池而不是返回给操作系统
  1） Pymalloc机制。为了加速python的执行效率，python引入内存池机制，用于管理小块内存的申请和释放
  2）  Python中所有小于256个字节的对象都是用pymalloc实现的分配器，而大的对象则使用系统的malloc
  3）  对于python对象，如整数、浮点数和list，都有其独立的私有内存池，对象间不共享他们的内存池。也就是说如果你分配又释放了大量的整数，用于缓存这些整数的内存就不能再分配给浮点数。

2.什么是lambda函数？它有什么好处?
  答：lambda表达式，通常是在需要一个函数，但不想费神命名函数的场合下使用，即匿名函数
  Lambda函数：首要用途是指点短小的回调函数
  Lambda[arguments]:expression
  >>>a = lambda x,y:x+y
  >>>a(3,11)
3.Python里面如何实现tuple和list的转换？
  答：使用tuple和list函数，type()可以判断对象的类型
6.Python里面如何拷贝一个对象？（赋值，浅拷贝，深拷贝的区别）
  答：
  赋值（=）：创建了对象的一个新的引用，修改其中任意一个变量都会影响到另一个
  浅拷贝：创建一个新的对象，但它包含的是对原始对象中包含项的引用（如果用引用的方式修改其中一个对象，另外一个修改也会改变）{1，完全切片法；2，工厂函数，如list（）；3，copy模块的copy()函数}
  深拷贝：创建一个新的对象，并且递归的复制它所包含的对象（修改其中一个，另一个不会改变）{copy模块的deep.deepcopy()函数}
7.介绍一下except的用法和作用？
  答：
  Try...except...except...[else...][finally...]
  执行try下的语句，如果执行引发异常，执行过程会跳到except下的语句。
  except分支顺序执行，如果引发的异常与except中的异常匹配，则执行相应的语句。如果所有的except都不匹配，则异常会传递到下一个调用本代码的最高层的try代码中。
  Try下的语句正常执行，则执行else块代码。如果发生异常，则不会执行
  如果存在finall语句，最后总会执行。
8.Python中pass语句的作用是什么？
  答：
  Pass不会执行任何操作，一般作为占位符或者创建占位程序
9.介绍一下Python下range()函数的用法？
  答：
  列出一组数据，经常用在for in range()循环中
10.如何用Python来进行查询和替换一个文本字符串？
  答：
  可以使用re模块的sub()函数或者subn()函数
  格式：sub(replacement,string[,count=0])(replacement是替换后的文本，string是需要被替换的文本，count是可选参数，最大可被替换的数量)
  subn()方法执行的效果和sub一样，不过它会返回一个二维数组，包括替换后新的字符串和总共替换的数量
11.Python里面match()和search()的区别？
  答：
  re模块的math(pattern，string[,flags]),检查string的开头是否与pattern匹配
  re模块的search（pattern，string，[,flags]），在string中搜索第一个与pattern匹配的值
12.用Python匹配HTML tag的时候，<.*>和<.*?>有什么区别？
  答：
  <.*>贪婪匹配 会返回最大的匹配值
  <.*?>非贪婪匹配，会返回第一个与该正则表达式匹配的值
13.Python里面如何生成随机数？
  答：
  random模块
  随机整数：random.randint(a,b):返回随机整数x a<=x<=b
  random.randrange(start,stop[,step])：返回一个范围在(start,stop,step)之间的实数，不包括结束值
  random.random():返回0~1之间的浮点数
  random.uniform(a,b):返回指定范围内的浮点数
14.有没有一个工具可以帮助查找python的bug和进行静态的代码分析？
    答：
        Pychecker:帮助查找Ｐｙｔｈｏｎ代码的bug,对代码的复杂度和格式提出警告
        Plint:　可以codingStandard检查
15.如何在一个function里面设置一个全局的变量？
  答：
  在function的开始插入一个global全局声明
16.单引号，双引号，三引号的区别
  答：
  单引号和双引号是等效的，如果需换行，使用\,三引号可以之间进行换行，并且可以包含注释
  单引号内可以直接使用双引号，需要转义单引号
  双引号内可以直接使用单引号，需要转义双引号
17.到底什么是Python？ 
  答：
  1）  python是一种解释性语言，这就是说与c语言及c的衍生语言不同，python在代码运行前不需要编译，其他解释性语言还包括PHP和Ruby
  2）  python是动态类型的语言，指的是你在声明变量时，不需要说明变量的类型，程序不会报错
  3）  python非常适合面向对象编程，它支持通过组合和继承的方式定义类。Python中没有访问说明符，类似c++中的private和public，这么设计的依据是’大家都是成年人了’
  4）  在python中，函数是第一类对象，也就是说他们可以被指定给变量，函数可以返回函数类型，也能接受函数作为输入。类也是第一类对象
  5）  Python代码编写快，但是运行速度比编译语言慢。好在python允许加入基于c语言编写的扩展。因此可以优化代码，消除瓶颈。Numpy就是一个例子，他的运行速度非常快，原因是很多算数运算并不是通过python实现的
  6）  Python用途非常广泛—网络编程，自动化，科学建模，大数据，等等，因此也被乘称作‘胶水语言’，用于改善其他语言和组件的运行状况
  7）  Python让困难的事情变得容易，程序员可以专注算法和数据结构的设计，而不用处理底层的细节
17.阅读下面的代码，写出A0，A1至An的最终值。
21.“猴子补丁”（monkey patching）指的是什么？这种做法好吗？
    答：　
        函数或者对象在已经定义好之后再去改变它的行为
        一般来说，函数在代码库中的行为最好保持一致，一般打猴子补丁是为了测试，可以使用ｍｏｃｋ包实现这个目的
        import datetime
        datetime.datetime.now() = lambda: datetime.datetime(2012, 12, 09)
22. 这两个参数是什么意思：*args，**kwargs？我们为什么要使用它们？
  答：
  *args：不确定传入多少个参数或者想要以元组或列表的形式传参
  **kwargs：不确定传入多少个关键字参数或想以字典的形式进行关键字传参
  *args和**kwargs这两个标识符是约定俗称的用法，也可以使用其他标识符，只是不利于与其他人交流
25.简要描述Python的垃圾回收机制（garbage collection）。
  答：
  Python在内存中存储了每个对象的引用计数（referrence count）,如果计数值变为0，相应的对象就会消失，分配该对象的内存就会释放出来用作他用
  偶尔会出现引用循环，垃圾回收器会定期寻找这个循环，并将其回收。举个例子，有两个对象o1和o2，而且符合o1.x == o2和o2.x==o1这两个条件，如果o1和o2没有其他的代码引用，那么他们就不应该继续存在，但他们的引用计数是1
  Python使用了某些启发式算法来加速垃圾回收。例如越晚创建的对象越有可能被回收。对象被创建之后，垃圾回收期会分配他们所属的代，每个对象都会被分配一个代，而被分配更年轻代的对象是优先被处理的。
26.将下面的函数按照执行效率高低排序。它们都接受由0至1之间的数字构成的列表作为输入。这个列表可以很长。一个输入列表的示例如下：[random.random() for i in range(100000)]。你如何证明自己的答案是正确的。
27.你是如何理解Python装饰器的？
  答：
  装饰器是一个工厂函数，接受一个函数作为参数，然后返回一个新函数。
  其闭包中包含被装饰的函数。
  有了装饰器，可以提取大量函数中与本身功能无关的类似代码（比如Flask中用于定义路由的@app.route就是一个很好的例子），达到代码重用的目的。
  可应用于插入日志、性能测试、事务处理等方面。
28.python写的CGI脚本，用print为什么不是打印到控制台，而是发送到客户端？
    答：ｐｒｉｎｔ输出是标准输出，可以指向任何可以标准输出的流，包括标准输出
29.什么是闭包？如何用Python写闭包？
  答：
  闭包可以实现将一个参数传递给一个函数，而不立即执行，达到延迟求值的目的。
  实现闭包满足三个条件：1）有内嵌函数，2）内嵌函数引用外部函数中的变量，3）外部函数的返回值是内嵌函数
30.Python的参数传递是值传递还是引用传递
举例说明Python函数参数传递的几种形式，并说明函数传参是值传递还是引用传递
  答：
  1）  python参数传递有：
  位置参数
  默认参数
  可变参数
  关键字参数
  2）  函数的传值到底是值传递还是有用传递，要分情况
  a 不可变参数值传递
    像整数和字符串这样的不可变对象，是通过拷贝进行传递的，因为你无论如何都不可能在原处改变对象
  b 可变参数引用传递
    比如像列表、字典这样的参数是通过引用传递。和c语言里用指针传递数组很相似，可变对象能在函数内部改变
31.字符串格式化:%和.format的区别
32.写一个函数, 输入一个字符串, 返回倒序排列的结果
  答：
  1）  反向切片法
  2）  变字符串为列表，用列表reverse函数
  3）  新建一个列表，从后往前取
  4）  用reversed函数，然后for循环遍历出来
  5）  利用双向列表deque中的extendleft函数
  6）  递归
33.按升序合并如下两个list, 并去除重复的元素
list1 = [2, 3, 8, 4, 9, 5, 6]
list2 = [5, 6, 10, 17, 11, 2]
  答：
  list3 = list1 + list2
  list3.sort()
  print(set(list3))
34. 以下的代码的输出将是什么? 说出你的答案并解释
class Parent(object):
    x = 1
class Child1(Parent):
    pass
class Child2(Parent):
    pass
print Parent.x, Child1.x, Child2.x
Child1.x = 2
print Parent.x, Child1.x, Child2.x
Parent.x = 3
print Parent.x, Child1.x, Child2.x
>>
  答：
  1 1 1
  1 2 1
  3 2 3
  Python中，类的变量在内部是作为字典处理的。
  如果一个变量名在当前类的字典中没有被发现，将搜索祖先类直至被找到
  如果任何它的子类重写了值，值仅仅在子类中改变
  如果值在父类中改变，会影响到任何未重写该值的子类的值
35. 下面的代码会不会报错
list = ['a', 'b', 'c', 'd', 'e']
print list[10:]
  答：
  不会报错，输出[],不会导致indexError
  当试图访问一个超过列表索引值的成员将会导致IndexError
  试图访问一个以超出列表长度的数作为开始索引的切片不会导致IndexError，并且会返回一个空列表
36. 说出下面list1,list2,list3的输出值
def extendList(val, list=[]):
    list.append(val)
    return list
list1 = extendList(10)
list2 = extendList(123,[])
list3 = extendList('a')
print "list1 = %s" % list1
print "list2 = %s" % list2
print "list3 = %s" % list3
>>
  答：
  List1 = [10, ‘a’]
  List2 = [123]
  List3 = [10, ‘a’]
默认列表仅仅在函数被定义时创建一次
37. python的底层网络交互模块有哪些？
38. python网络交互时，二进制打包解包的模块有哪些
39. python的测试框架有哪些？试列出常用的3个或更多
40. 一行把[1,2,3,1,2,3] 中的重复元素剔除
  答：
  list(set([1, 2, 3, 1, 2, 3]))
2、第二阶段
41、Python和多线程（multi-threading）。这是个好主意吗？列举一些让Python代码以并行方式运行的方法
42.谈谈你对Python中多线程和多进程的理解
43.什么是数据库的索引？索引的优缺点有哪些？
  答：
    索引：对数据库中表的一列或多列值进行排序的一种结构(mysql中采用Btree结构)
  优点：
  1）  加快数据的检索速度
  缺点：
  1）  当对表中数据增加、删除、修改，需动态维护索引，降低数据维护速度
  2）  索引需要占据物理存储空间（/var/lib/mysql）


44.你认为什么样的表和列需要建立索引？
  数据量大的,需要经常进行查询操作的需要建立索引
    1)表与表连接用于多表联合查询的字段需要建立索引
    2)用于排序的字段可以添加索引
    3)用于分组的字段视情况添加索引
    4)添加多列索引的时候,对应的多条件查询触发该索引的同时,对应索引最左侧列的单条件查询也可以触发
    5)如果有些表注定只能进行全局查找,就没必要建立索引

45.建立索引需要遵守什么原则？
  1)越小的数据类型越好 在磁盘,内存中需要更少空间,处理更快
  2)越简单数据类型 整形数据比字符串比较起来,开销更小.字符串比较更复杂,处理起来也更耗时
  3)避免使用NNULL 应该指定索引列为NOT NULL  含有空值的列很难进行查询优化,因为空值会使索引,索引的统计信息以及比较运算变的更加复杂,应该使用特殊的字符代替空值,比如 0 空字符串
  4)选取唯一性高的字段  对于大量重复的字段增加索引没什么意义

46.简单说说索引的工作原理
  以空间换时间
    未建立索引前,查找数据需要对每一条记录进行扫描,将符合条件的数据放到结果集中,直到全表扫描完毕
    建立索引之后,会将建立索引的值放在一个n叉树上(ee),B树的特点适合在磁盘等直接存储设备上组织动态查找表每次进行搜索时,会根据索引的key值直接去树上查找

47.谈谈你对MySQL中字符集和排序规则的理解

48.varchar与char的区别是什么？大小限制？utf8字符集下varchar最多能存多少个字符 
  答：
    Varchar是可变长度，必须给定一个宽度值 节省存储空间 性能低
  Char是固定长度，默认宽度1 浪费存储空间 性能高
  Varchar最大长度为65535bytes  字符类型为utf8,最多能存储65535个字符

49.primary key和unique的区别？
  答：
  1)  primary key = unique + not null
  2)  两者都是约束的范畴，都可以作为外键的参考，不同的是，一张表只有一个主键
  3)  两者创建都需要依靠索引，如果在创建两者的时候没有建好的索引可以使用，oracle会自动建立一个唯一的索引。

50.是否有必要使用外键？为什么不用外键？
  答：

    正方（需要）

  1.  数据一致性
    由数据库自身保证数据的完整性和一致性比较可靠，因为单靠程序很难100%保证数据库的完整性，使用外键可以在服务器宕机或出现其他问题时，也尽可能保证数据的完整性

  2.  ER图可靠性
    有主外键的数据库设计可以增加ER图的可读性，这点非常重要

  3.  使设计更全面
    外键在一定程度上说明业务逻辑，使设计更加周到全面

  4.  级联性能未必最低
    除非能证明触发器的性能和可维护性比外键更优，否则为什么要否定外键呢？

  5.  程序能完全保证安全性吗?
    使用程序来维护数据库的完整性，是严重降低数据安全性的一种做法。连接字符串里如果有uid或pwd或类似的字符串，使用工具可以获取数据库的用户名和密码。因为每次建立数据库连接都要在网上以标准格式传递这些信息，从此编码内的任何安全保证都是空谈
  6.  导致冗余
    不使用外键，在级联最底层的表必然会重复好几层的数据，导致数据冗余，最底层的数据量翻倍。IO瓶颈是影响数据库性能瓶颈之一

  反方(不需要)

  1、程序逻辑
    在某程序逻辑中，程序包已经足够保证其完整性，我会在存储过程或包等地方做严谨判断
  2、性能问题
    比如一个业务流水表，频繁插入数据，如果有三个外键，那么每次插入一条记录都要对这三个外键对应的三个表做相应的查找判断有无数据，虽然外键指向关联表的字段肯定是索引，但我觉得很多时候这样的判断在程序里已经做好了，再通过外键进行判断必然会降低性能，其实有的地方判不判断是无所谓的，但是用了外键，就必须花时间去判断。无论Oracle内部多么优化外键对应数据的检索速度，它总是一个不小的消耗
  3、维护麻烦
    很多公司的软件都是定制的，随意性比较大，在项目开发实施的过程中，需要经常对表进行修修补补，还有就是业务逻辑有bug或者其他情况，需要手工维护数据，有错综复杂的外键关联着，很是麻烦
  4、外键定死了先后生成关系
    单据主从表，最常见的是先生成明细表，然后生成主表，但是定死了外键就没法实现

    结论：在大型系统（性能要求不高，安全性要求高），使用外键；在大型系统（性能要求高，安全自己控制）不使用外键，小程序自己决定，最好使用外键
    用外键要适当，不要过分追求
    不用外键而用程序控制数据的安全性和完整性，应单独写一层来保证，个个应用都要通过这个层来保证数据库




51.MySQL中外键是否要添加索引？
  如果没有索引的话，mysql在你每次添加，修改数据表的时候都要进行全表扫描以确定其是否遵循外键约束，效率上不合适，所以要添加
52、socket通信过程？ 
    tcp协议socke通信:
      服务端 socket--> bind--> listen--> accept-->  recv/send--> close
      客户端 socket--> [bind]----->      connect--> recv/send--> close

    udp:
      server: socket bind   recvfrom/sendto close
      client: socket [bind] recvfrom/sendto close

54. 用一条SQL语句 查询出每门课都大于80分的学生姓名。表scores如下：
name      kecheng       fenshu
张三     语文       81
张三     数学       75
李四     语文       76
  答：select name from scores
  Group by name
  Having min(fenshu) > 80;
3、第三阶段
55. 浏览器渲染原理解析
56. 什么是盒子模型？
57. CSS选择器都有哪些
58. 超链接访问过后hover样式就不出现的问题是什么？如何解决？
59. 简述一下src与href的区别
60. 什么是CSS Hack?
61. 简述同步和异步的区别
62. px和em的区别
63. 怎样添加、移除、移动、复制、创建和查找节点？
64. 谈谈你对箭头函数的理解
65. js继承方式及其优缺点
66. 在Javascript中什么是伪数组？如何将伪数组转化为标准数组？
67. 请描述一下cookies，sessionStorage和localStorage的区别
68. web storage和cookie的区别
69. 一次完整的HTTP事务是怎样的一个过程？
70. 单页面应用的优缺点
71. Ajax的get和post方式的区别？
72. Ajax请求时，如何解析json数据？
73. 解释jsonp解决跨域问题的原理
74. Jsonp和ajax的区别
75. 说一下对 Django 和 Tornado 的了解
76. 解释下django-debug-toolbar的使用
77. 解释下Http协议/Http协议主要特点
    http是一个属于应用层的面向对象的协议，由于其简洁，快速的方式，适用于分布式超媒体信息系统
    特点：
      1）支持客户端/服务器操作
      2）简单快速
        客户像服务器请求服务时，只需传送请求方法和路径
        请求方法通常为get post head  每种方法规定了客户与服务器联系的类型不同
        http协议简单，因此http程序规模小，通信速度快
      3）灵活
        允许传输任意类型的对象，正在传输内容有content加以标记
      4）无连接
        无连接：限制每次连接只处理一个请求
        服务器处理完客户请求，并收到客户应答后就断开连接，节省传输时间
      5）无状态
        无状态协议：对事务处理没有记忆能力
        如果后续处理需要前面的信息，必须重传，浪费时间
        如果不需要前面信息，应答较快
    
78. 解释下Http请求头和常见响应状态码
    

1、面试题
  1、填空题
    1、MySQL中的数据类型有 数值、字符、枚举、日期时间
    2、关系型数据库的核心内容是 _关系即二维表
  2、简答题
    1、简述客户端把数据存储到数据库服务器上的过程
      答：
1）  创建与数据库的连接 mysql –h主机地址 –u用户名 –p密码； 
2）  切换到库 use 库名；
3）  新建或修改表
4）  断开与数据库连接
    2、char和varchar的区别？各自的特点？
      答：
        char是定长 默认宽度为1 浪费存储空间 性能高
        varchar是变长 必须给定宽度 节省存储空间 性能低；

    3、常用存储引擎及各自特点？
      答：
1、  innodb特点
1、  共享表空间
表名.frm 表结构
表名.idb 表索引信息&记录
2、  支持行级锁
2、  myisam特点
1、  独享表空间
表名.frm 表结构
表名.myd 表记录
表名.myi 表索引信息
2、  支持表级锁

6、MySQL调优
  1、选择合适的存储引擎
    1、经常用来读的表使用myisam存储引擎
    2、其余的表都用innodb存储引擎
  2、SQL语句调优(尽量避免全表扫描)
    1、在select where order by常涉及到的字段上建立索引
    2、where子句中不使用 !=,否则将放弃使用索引进行全表扫描
    3、尽量避免用NULL值判断,否则会全表扫描
      示例：
        select id from t1 where number is null;
      优化：
        在number字段设置默认值0
    4、尽量避免 or 来连接条件,导致全表扫描
      示例(优化前)：
        select id from t1 where id=10 or id=20;
      优化后：
        select id from t1 where id=10
        union all
        select id from t1 where id=20;
    5、模糊查询尽量避免使用前置 %,导致全表扫描
      select id from t1 where name like "a%";
    6、尽量避免 in 和 not in,导致全表扫描
      select id from t1 where id in(1,2,3);
      select id from t1 where id between 1 and 3;
    7、尽量避免使用 select * ...,要用具体的字段列表代替 *,不要返回用不到的任何字段


1. 什么是网络七层模型，每一层什么功能。tcp/ip模型又是什么
  应用层 提供用户服务，具体内容由程序确定
  表示层  数据的压缩、解压、加密
  会话层  建立程序级的连接，决定使用传输层使用什么样的协议进行传输
  传输层  提供合适的传输服务 进行流量控制
  网络层  路由选择 网络互连 分组传输
  链路层  提供链路交换 具体消息发送
  物理层  物理硬件 接口
2. 简述三次握手和四次挥手的过程
  三次握手
    客户端向服务器发起连接请求，询问是否可以进行连接
    服务器确认收到请求(允许连接)，返回报文
    客户端收到许可，建立连接
  四次挥手
    主动方发送报文告知被动方要断开连接
    被动方返回报文，告知收到请求，准备断开
    被动方再次发送报文，告知准备就绪，可以断开
    主动方发送报文确认断开

3.网站访问流程
  1.客户端(浏览器)发起http请求
  2.传输层使用tcp协议建立连接,将请求内容层层打包,发送给web服务器
  3.web服务器解包后解析http请求,交由后端程序处理
  4.后端应用得到结果,通过web服务器回发给前端

4.什么是http协议,用途及其特点
  1.http 超文本传输协议
  用途:
    1)网站中网页的传输和数据的传输
    2)也可用作基于http协议的编程传送数据
  特点:
    1)应用层协议,传输层使用TCP协议
    2)简单,灵活,接口使用方便
    3)几乎支持所有的数据类型
    4)是无状态的
    5)http1.1 持续连接

5.http请求种类及每种功能
  1.get 获取网络资源
  2.post 提交一定的数据,得到返回结果
  3.head 获取响应的头信息
  4.put 更新服务器资源
  5.delete 删除服务器资源
  6.trace 用于测试
  7.connect 保留功能
  8.option 请求获取服务器的性能和信息

6.http响应种类及常见的响应码
  响应种类:
    1xx : 提示信息,表示已经接收到请求,正在处理
    2XX: 请求响应成功
    3XX: 重定向,完成任务需要其他操作
    4XX: 客户端错误
    5XX: 服务端错误

  常见响应吗:
    200: 成功
    400 BadRequest: 客户端请求有错误,不能被服务端理解
    401 Unauthorized: 请求未经授权,这个响应吗必须和WWW-Authenticate一起使用
    403 Forbidden: 服务器收到请求,但是拒绝提供服务
    404 Not Found: 请求资源不存在, 例如输入了错误的url
    500 Internal server error: 服务器发生不可预期的错误
    503 Server Unavailable:服务器暂时无法执行

7.get请求和post请求的功能和区别
  get 获取网络资源
  post 提交一定的数据,得到返回结果

8.tcp和udp区别:
  1)tcp使用数据流传输数据,udp数据包
  2)tcp 粘包
  3)tcp对网络要求高,udp更适合实时传输
  4)tcp保证传输数据的可靠性,udp不保证
  5)tcp需要调用listen() accept()方法建立连接,udp不需要
  6)tcp接收发送数据使用 recv send sendall
    udp               recvfrom sendto

9.进程的状态
  三态:
    就绪态:进程具备运行条件,等待系统分配处理器运行
    运行态:进程占有cpu处于运行的状态
    等待态:又称阻塞态,睡眠态, 进程当前不具备运行条件,需要阻塞等待
  五态:
    新建态:创建一个进程,获取资源,直接表现为运行一个程序或在程序中创建新的进程
    终止态:进程执行结束,资源回收过程

1. 什么是进程，进程的特征
  进程:程序在计算机中一次执行的过程
  进程的特征:
    1)进程是操作系统资源分配的最小单位
    2)每个进程单独占有4G的虚拟内存
    3)进程间相互独立,互不影响
2. 多个进程,如何占有CPU?
  一个内核同一时刻只能运行一个任务
  多个进程对内核资源进行争夺,操作系统决定哪个进程占有计算机核心
  占有计算机核心的进程,我们称为该进程占有CPU时间片
3. 孤儿进程:
     进程优先于子进程退出,该进程称为孤儿进程,会被操作系统中特定的进程收养,成为孤儿进程新的'父进程'
   僵尸进程:
      子进程优先父进程值退出,父进程没有处理子进程的退出状况,成为僵尸进程.会滞留部分PCB于内存中,消耗系统资源


进程间通信有几种方式
  管道　队列　　共享内存　　信号　　信号量　　本地套接字
  各有什么特点
            管道　　　　　　　队列　　　      共享内存
  开辟空间    内存　　　　　　内存　　　       内存

  读写方式　　　　单向/双向　　先进先出　    操作覆盖内存

  效率        一般      一般　       快

  应用　      多用于     方便灵活     较复杂
            亲缘进程　　　　　广泛

  是否需要      否　       否　         否
  互斥机制

  信号：一个进程向另一个进程通过信号传递信息　　属于异步通信
  信号量:给定一定的信号量，对多个进程可见，并且多个进程均可操作
        进程根据信号量的多少，可以有不同的行为

  面试官常问：队列,信号,套接字

进程线程区别联系
    1)两者都是多任务编程，都可使用多核
    ２）进程的创建和关闭要比线程消耗更多的资源
    ３）进程空间独立，数据安全性更好操作，有专门的进程通信方式
    ４）线程使用全局变量进行通信，往往需要配合同步互斥机制防止产生资源的争夺
    ５）一个进程可以包含多个线程，线程共享进程资源
    ６）进程，线程都有自己特有的资源

同步互斥实现方法，意义
    实现方法：Ｅｖｅｎｔ事件　　ｌｏｃｋ锁　　ｃｏｎｄｉｔｉｏｎ　条件变量
    意义：解决对共有资源操作的争夺
　　　
进程线程通信方式
    进程通信：管道　队列　共享内存　　信号　　信号量　本地套接字
    线程　　：全局变量

进程线程的特点和选择
    ０）进程是计算机资源分配的最小单位，线程是计算机核心分配　的最小单位
    １）需要创建较多的并发，任务比较简单，线程比较合适
    ２）如果程序间数据资源使用重叠较多，需要考虑使用线程锁是否需要更复杂的逻辑
    ３）如果多个任务并没有什么关联性，不要将多个线程强行融入一个进程中
    ４）Ｐｙｔｈｏｎ线程不适用于计算密集型并发

简单设计模式理解

僵尸进程，　进程状态，　GIL概念理解
    僵尸进程：子进程先于父进程退出，父进程未对子进程的退出做任何处理，使得子进程成为僵尸进程
    进程状态：
        三态　　五态
        新建态：创建一个进程，获取资源　直接表现为运行一个程序，或在程序中创建新的进程
        就绪态：进程具备运行条件，等待系统分配处理器运行
        运行态：进程占有ＣＰＵ处于运行状态
        等待态：阻塞态，睡眠态　进程暂时不具备运行条件，需要阻塞等待
        终止态：进程执行结束，资源回收

什么是线程
    线程也是多任务编程的一种方法，可以使用计算机多核，是计算机核心分配的最小单位
    线程又称轻量级的进程，在创建和删除时消耗计算机资源小

关系型数据库和非关系型数据库的区别以及各自的优缺点？
答：
　　关系型数据库：采用关系模型来组织数据结构的数据库（二维表）
　　关系型数据库
　　　　优点：
    　　１）容易理解，类似于我们常见的表格
    　　２）操作方便，都是使用ｓｑｌ语句
    　　３）数据一致性高，冗余度低，完整性好
    　　４）技术成熟，可以使用外部链接等比较复杂的操作
    缺点：
    　　１）不能很好地满足高并发的需求，每次都需要进行ＳＱＬ语句的解析
    　　２）针对含量数据的瞬间爆发读写性能不足，ＳＱＬ语句每次执行都有加锁保证数据的原子性
    　　３）数据一致性高有时候会导致浪费大量的空间
    　　４）数据扩展普遍比非关系型困难

  非关系型数据库
  　　优点：
  　　　　１）高并发，大数据读写能力强
  　　　　２）采用分布式，数据容易扩展
  　　　　３）弱化了数据结构，降低了数据的一致性
  　　缺点：
  　　　　１）通用性差，没有像ＳＱＬ那样一致的操作
  　　　　２）操作灵活，容易导致混乱
      ３）没有ｊｏｉｎ，有的数据库没有事务支持等操作

MongoDB 的优点
　　答：
　　　　１）由ｃ＋＋编写的数据库
　　　　２）支持非常丰富的增删查改操作
    ３）支持丰富数据结构
    ４）使用，　部署方便，支持分布，便于扩展
    ５）支持很多编程语言接口（python, ruby, c++, php, c#）

MongoDB 插入文档的方法：
　　　　insert   save  update(upsert)
